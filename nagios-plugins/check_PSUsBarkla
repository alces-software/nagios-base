#!/bin/bash
################################################################################
# (c) Copyright 2007-2011 Alces Software Ltd                                   #
#                                                                              #
# HPC Cluster Toolkit                                                          #
#                                                                              #
# This file/package is part of the HPC Cluster Toolkit                         #
#                                                                              #
# This is free software: you can redistribute it and/or modify it under        #
# the terms of the GNU Affero General Public License as published by the Free  #
# Software Foundation, either version 3 of the License, or (at your option)    #
# any later version.                                                           #
#                                                                              #
# This file is distributed in the hope that it will be useful, but WITHOUT     #
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or        #
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License #
# for more details.                                                            #
#                                                                              #
# You should have received a copy of the GNU Affero General Public License     #
# along with this product.  If not, see <http://www.gnu.org/licenses/>.        #
#                                                                              #
# For more information on Alces Software, please visit:                        #
# http://www.alces-software.org/                                               #
#                                                                              #
################################################################################

# Script to check for PSU health.
# 2 PSUs per chassis. 4 Nodes per chassis. The first node in each chassis's view of PSU health is reported.

# set ipmi-check spool directory
# checkdir=/var/spool/nagios/ipmi-check
checkdir="/home/ross/Desktop/Scripts/bash/nagios/testing/ipmi-check"

# Check that ipmi output files are available
[[ -d $checkdir ]] || exit 3

# By default, node names are nodeXYZ, unless customers specify otherwise.
node_name="node"

# Check that we've been passed a parameter
remote=$1
if [ ! $remote ] ; then

   psu_status_fault=0
   psu_status_good=0
   psu_status_inconsistent=0
   psu_redundancy_fault=0
   psu_redundancy_good=0
   nodes_per_chassis=4
   good_nodes_per_chassis=0

   # Arrays to keep track of which node's PSUs need attention. 
   # Use this ot keep track of which nodes to check when all nodes in a chassis report a PSU Status problem
   declare -a unhealthy_psus_node

   # Use this to keep track of which nodes to check when 0 < x < ${nodes_per_chassis}, x nodes report a problem, and ${nodes_per_chassis} - x report OK
   declare -a inconsistent_psus_node

   declare -a unhealth_redundancy_psus_node

   # The following string is what we are hoping to find for the PSU Status as reported from each node per chassis.
   # Anything other than this indicates a problem with a PSU.

   psu_status_ok="'Presence detected'"

   # The following string is what we are hoping to find for PSU Redundancy as reported from each node per chasis.
   # Anything other than this indicates a PSU Redundancy problem.

   psu_redundancy_ok="'Fully Redundant'"


   # Get listing of NODE files and iterate through each one 
   for file in `ls -1 $checkdir/$node_name*`
   do

      # Obtain number of the node from the file name	   
      node_nr=`echo $file | grep -o "[0-9]*"`

      # Remove leading zeros
      node_nr=`echo $node_nr | sed 's/^0*//'`
      
      # check for the PSU status in a Chassis from a node's perspective
      if [ `egrep -i "psu (1|2) Status" $file | grep -cv "$psu_status_ok\$"` -gt 0 ] ; then
         psu_status_fault=`expr $psu_status_fault + 1`
	 bad_nodes_per_chassis=`expr ${bad_nodes_per_chassis} + 1`
      else
         psu_status_good=`expr $psu_status_good + 1`
         good_nodes_per_chassis=`expr $good_nodes_per_chassis + 1`
      fi

      # Every ${nodes_per_chassis} nodes, check how many nodes are reporting errors
      if [ $((${node_nr} % ${nodes_per_chassis})) == 0 ] ; then

	  # Not all nodes agree about their Chassis PSU Status
          if [ ${good_nodes_per_chassis} -lt ${nodes_per_chassis} ] && [ ${good_nodes_per_chassis} -gt "0" ] ; then
		  inconsistent_psus_node=("${inconsistent_psus_node[@]}" "node[$((${node_nr}-${bad_nodes_per_chassis }+1))]")
		  psu_status_inconsistent=`eval ${psu_status_inconsistent} + 1`
	  
	  # All nodes agree their PSU Status is unhealthy
          elif [ ${good_nodes_per_chassis} -eq 0 ] ; then
		  unhealthy_psus_node=("${unhealthy_psus_node[@]}" "node[$((${node_nr}-${bad_nodes_per_chassis}+1))]")
		  psu_status_fault=`eval ${psu_status_fault} + 1`

	  # All nodes agree their PSU Status is OK.
          elif [ ${good_nodes_per_chassis} -eq ${nodes_per_chassis} ] ; then
              psu_status_good=`eval ${psu_status_good} + 1`

	  # We are here if good_nodes_per_chassis is less than 0 or greater than nodes_per_chassis
	  else
              echo "Error! Invalid Number of good nodes reported! (Must be between 0 and 4 inclusive!)"
          fi

	  # Reset for the next chassis check
	  good_nodes_per_chassis=0
	  bad_nodes_per_chassis=0
      fi
   done
      # Now check for PSU Redundancy
fi
